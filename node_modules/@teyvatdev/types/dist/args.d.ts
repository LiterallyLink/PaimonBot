import { Prisma } from "./types/client";
declare type PickableAggregateArgs = "take" | "skip";
export declare type Artifact = Prisma.ArtifactArgs & Prisma.ArtifactWhereUniqueInput;
export declare type Artifacts = Prisma.ArtifactArgs & Pick<Prisma.AggregateArtifactArgs, PickableAggregateArgs>;
export declare type ArtifactSet = Prisma.ArtifactSetArgs & Prisma.ArtifactSetWhereUniqueInput;
export declare type ArtifactSets = Prisma.ArtifactSetArgs & Pick<Prisma.AggregateArtifactSetArgs, PickableAggregateArgs>;
export declare type Character = Prisma.CharacterArgs & Prisma.CharacterWhereUniqueInput;
export declare type Characters = Prisma.CharacterArgs & Pick<Prisma.AggregateCharacterArgs, PickableAggregateArgs>;
export declare type CharacterAscension = Prisma.CharacterAscensionArgs & Prisma.CharacterAscensionWhereUniqueInput;
export declare type CharacterAscensions = Prisma.CharacterAscensionArgs & Pick<Prisma.AggregateCharacterAscensionArgs, PickableAggregateArgs>;
export declare type CharacterAscensionMaterial = Prisma.CharacterAscensionMaterialArgs & Prisma.CharacterAscensionWhereUniqueInput;
export declare type CharacterAscensionMaterials = Prisma.CharacterAscensionArgs & Pick<Prisma.AggregateCharacterAscensionMaterialArgs, PickableAggregateArgs>;
export declare type CharacterProfile = Prisma.CharacterProfileArgs & Prisma.CharacterProfileWhereUniqueInput;
export declare type CharacterProfiles = Prisma.CharacterProfileArgs & Pick<Prisma.AggregateCharacterProfileArgs, PickableAggregateArgs>;
export declare type CommonAscensionMaterial = Prisma.CommonAscensionMaterialArgs & Prisma.CommonAscensionMaterialWhereUniqueInput;
export declare type CommonAssensionMaterials = Prisma.CommonAscensionMaterialArgs & Pick<Prisma.AggregateCommonAscensionMaterialArgs, PickableAggregateArgs>;
export declare type CommonMaterial = Prisma.CommonMaterialArgs & Prisma.CommonMaterialWhereUniqueInput;
export declare type CommonMaterials = Prisma.CommonMaterialArgs & Pick<Prisma.AggregateCommonMaterialArgs, PickableAggregateArgs>;
export declare type Consumeable = Prisma.ConsumeableArgs & Prisma.ConsumeableWhereUniqueInput;
export declare type Consumeables = Prisma.ConsumeableArgs & Pick<Prisma.AggregateConsumeableArgs, PickableAggregateArgs>;
export declare type ConsumeableRecipe = Prisma.ConsumeableRecipeArgs & Prisma.ConsumeableRecipeWhereUniqueInput;
export declare type ConsumeableRecipes = Prisma.ConsumeableArgs & Pick<Prisma.AggregateConsumeableRecipeArgs, PickableAggregateArgs>;
export declare type CookingMaterial = Prisma.CookingMaterialArgs & Prisma.CookingMaterialWhereUniqueInput;
export declare type CookingMaterials = Prisma.CookingMaterialArgs & Pick<Prisma.AggregateCookingMaterialArgs, PickableAggregateArgs>;
export declare type CraftingMaterial = Prisma.CraftingMaterialArgs & Prisma.CraftingMaterialWhereUniqueInput;
export declare type CraftingMaterials = Prisma.CraftingMaterialArgs & Pick<Prisma.AggregateCraftingMaterialArgs, PickableAggregateArgs>;
export declare type Domain = Prisma.DomainArgs & Prisma.DomainWhereUniqueInput;
export declare type Domains = Prisma.DomainArgs & Pick<Prisma.AggregateDomainArgs, PickableAggregateArgs>;
export declare type Element = Prisma.ElementArgs & Prisma.ElementWhereUniqueInput;
export declare type Elements = Prisma.ElementArgs & Pick<Prisma.AggregateElementArgs, PickableAggregateArgs>;
export declare type ForgeRecipe = Prisma.ForgeRecipeArgs & Prisma.ForgeRecipeWhereUniqueInput;
export declare type ForgeRecipes = Prisma.ForgeRecipeArgs & Pick<Prisma.AggregateForgeRecipeArgs, PickableAggregateArgs>;
export declare type ProcessRecipe = Prisma.ProcessRecipeArgs & Prisma.ProcessRecipeWhereUniqueInput;
export declare type ProcessRecipes = Prisma.ProcessRecipeArgs & Pick<Prisma.AggregateProcessRecipeArgs, PickableAggregateArgs>;
export declare type Region = Prisma.RegionArgs & Prisma.RegionWhereUniqueInput;
export declare type Regions = Prisma.RegionArgs & Pick<Prisma.AggregateRegionArgs, PickableAggregateArgs>;
export declare type Talent = Prisma.TalentArgs & Prisma.TalentWhereUniqueInput;
export declare type Talents = Prisma.TalentArgs & Pick<Prisma.AggregateTalentArgs, PickableAggregateArgs>;
export declare type TalentLevelUpMaterial = Prisma.TalentLevelUpMaterialArgs & Prisma.TalentLevelUpMaterialWhereUniqueInput;
export declare type TalentLevelUpMaterials = Prisma.TalentLevelUpMaterialArgs & Pick<Prisma.AggregateTalentLevelUpMaterialArgs, PickableAggregateArgs>;
export declare type Weapon = Prisma.WeaponArgs & Prisma.WeaponWhereUniqueInput;
export declare type Weapons = Prisma.WeaponArgs & Pick<Prisma.AggregateWeaponArgs, PickableAggregateArgs>;
export declare type WeaponAscension = Prisma.WeaponAscensionArgs & Prisma.WeaponAscensionWhereUniqueInput;
export declare type WeaponAscensions = Prisma.WeaponAscensionArgs & Pick<Prisma.AggregateWeaponAscensionArgs, PickableAggregateArgs>;
export declare type WeaponAscensionMaterial = Prisma.WeaponAscensionMaterialArgs & Prisma.WeaponAscensionMaterialWhereUniqueInput;
export declare type WeaponAscensionMaterials = Prisma.WeaponAscensionMaterialArgs & Pick<Prisma.AggregateWeaponAscensionMaterialArgs, PickableAggregateArgs>;
export declare type WeaponEnhancementMaterial = Prisma.WeaponEnhancementMaterialArgs & Prisma.WeaponAscensionMaterialWhereUniqueInput;
export declare type WeaponEnhancementMaterials = Prisma.WeaponEnhancementMaterialArgs & Pick<Prisma.AggregateWeaponEnhancementMaterialArgs, PickableAggregateArgs>;
export {};
